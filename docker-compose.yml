services:
  backend:
    build: ./backend/auth-service    
    env_file:
      - .env
    environment:
      - BACKEND_PORT=${BACKEND_PORT}
    volumes:
      - ./backend/core:/app/core
      - ./backend/auth-service/lib:/app/lib
      - ./backend/auth-service/test:/app/test
      - ./backend/auth-service/util:/app/util
    container_name: auth-service
    ports:
      - "${BACKEND_PORT}:${BACKEND_PORT}"
    networks:
      - app-network
  expense-service:
    build: ./backend/expense-service
    env_file:
      - .env
    environment:
      - EXPENSE_SERVICE_PORT=${EXPENSE_SERVICE_PORT}
    volumes:
      - ./backend/core:/app/core
      - ./backend/expense-service/lib:/app/lib
      - ./backend/expense-service/test:/app/test
      - ./backend/expense-service/util:/app/util
    container_name: expense-service
    ports:
      - "${EXPENSE_SERVICE_PORT}:${EXPENSE_SERVICE_PORT}"
    networks:
      - app-network
  nginx:
    build: ./nginx
    env_file:
      - .env
    container_name: nginx
    volumes:
      - ./frontend/dist:/usr/share/nginx/html
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/certs:/etc/nginx/certs 
    depends_on:
      - backend
    ports:
      - "${FRONTEND_PORT}:${FRONTEND_PORT}"
      - "${HTTPS_PORT}:${HTTPS_PORT}"
    networks:
      - app-network
  mysql_db:
    build: ./mysql
    env_file:
      - .env
    container_name: mysql
    restart: always
    ports:
      - "${DATABASE_PORT}:${DATABASE_PORT}"
    volumes:
      - ./mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app-network
networks:
  app-network:
    driver: bridge